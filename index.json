[
{
	"uri": "https://tranthebao12.github.io/workshopAWS1/5-deloy/5.1-updateiamrole/5.1.1-createvpc/",
	"title": "Create IAM Role for EC2 Instance Profile",
	"tags": [],
	"description": "",
	"content": "5.1.1. Create IAM Role for EC2 Instance Profile (Role that EC2 server will use) This is the role that the EC2 instances in your Elastic Beanstalk environment will assume. It needs minimal permissions to operate in the Elastic Beanstalk environment, including communicating with other AWS services like S3, CloudWatch, etc.\nSteps: Log in to the AWS Management Console and navigate to the IAM (Identity and Access Management) service.\nIn the left navigation bar, select Roles.\nClick the Create role button. In Select type of trusted entity, select AWS service.\nIn Choose a use case, select EC2, then click Next. Add permissions:\nSearch and select policy AWSElasticBeanstalkWebTier. Search for and select the AmazonS3FullAccess policy (or a custom S3 policy with more specific permissions if you want to restrict S3 access). Click Next. Review and Create: Set the Role name (e.g. ImageToVideoWeb-EC2-InstanceRole). Review the attached policies. Click Create role. "
},
{
	"uri": "https://tranthebao12.github.io/workshopAWS1/3-accessibilitytoinstances/3.1-public-instance/",
	"title": "Create S3 Bucket",
	"tags": [],
	"description": "",
	"content": "Step 1: Create an S3 Bucket Go to AWS Management Console and go to the S3 service. Click Create bucket. Enter the following information: Bucket name: imagetovideoweb-demo-\u0026lt;UNIQUE-ID\u0026gt; (eg: imagetovideoweb-demo-20250608) Region: us-east-1 (N. Virginia) In the Block Public Access section, uncheck Block all public access (only applies to demo, in practice IAM should be used to control access). Click Create bucket to complete. This configuration is for demonstration purposes only. In a production environment, you should control access via IAM instead of allowing public access.\n"
},
{
	"uri": "https://tranthebao12.github.io/workshopAWS1/",
	"title": "IImagetovideo using S3 and public AWS Elastic Beanstalk",
	"tags": [],
	"description": "",
	"content": "IImagetovideo using S3 and public AWS Elastic Beanstalk Overview In this lab, you will learn about S3 and AWS Elastic Beanstalk. Practice creating a connection to a public server.\nContent Introduction Preparation Deploy Amazon S3 Test the entire system Deploy AWS Elastic Beanstalk Clean up resources "
},
{
	"uri": "https://tranthebao12.github.io/workshopAWS1/4-s3log/4.1-updateiamrole/",
	"title": "Image Upload Test",
	"tags": [],
	"description": "",
	"content": "Step 1: Upload an Image To verify that the image upload functionality is working correctly, follow the steps below:\nInstructions: Run the Application:\nStart your backend server or frontend application that handles image uploads. Upload a Test Image:\nUse the web interface to upload a sample image. For example: an image containing Vietnamese text to verify multilingual support. Check the S3 Bucket:\nOpen the AWS S3 Console. Navigate to your bucket. Verify that the image appears inside the uploads/ folder. Screenshot Requirements: A screenshot of the web interface with the image upload form. A screenshot of the S3 Console showing the uploaded image inside the uploads/ folder. Make sure the application has permission to upload to S3. If you encounter errors, check the IAM Role and bucket policy settings.\n"
},
{
	"uri": "https://tranthebao12.github.io/workshopAWS1/2-prerequiste/2.1-createec2/2.1.1-createvpc/",
	"title": "Install Visual Studio 2022",
	"tags": [],
	"description": "",
	"content": "Install Visual Studio 2022 with ASP.NET workload Visit the official Visual Studio download page:\nhttps://visualstudio.microsoft.com/downloads/\nDownload and run the Visual Studio 2022 Installer (Community, Professional, or Enterprise).\nIn the installer:\nSelect the ASP.NET and web development workload. (Optional) You can also select .NET desktop development if you plan to work with desktop apps. Click Install to begin the installation process.\nAfter the installation is complete, open Visual Studio and make sure you can create a new ASP.NET Core Web App project.\n"
},
{
	"uri": "https://tranthebao12.github.io/workshopAWS1/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Introduction Objective: Introduce the project and AWS services.\nContent:\nImageToVideoWeb Project:\nAn ASP.NET Core web application that allows uploading images, extracting text (OCR), translating text (Google Translate), generating speech (Google TTS), and creating videos (FFmpeg). Uses Amazon S3 for file storage and Elastic Beanstalk for deployment. Amazon S3:\nStores input images in the uploads/ folder. Stores temporary text and audio files in the temp/ folder. Stores final output videos in the outputs/ folder. -\n"
},
{
	"uri": "https://tranthebao12.github.io/workshopAWS1/5-deloy/5.1-updateiamrole/",
	"title": "Preparing AWS Elastic Beanstalk Configuration",
	"tags": [],
	"description": "",
	"content": "5.1.1. Create an IAM Role for the EC2 Instance Profile (the Role that the EC2 server will use) 5.1.2. Create an IAM Role for the Elastic Beanstalk Service (the Role that the Elastic Beanstalk service will use) 5.1.3. Create a Key Pair "
},
{
	"uri": "https://tranthebao12.github.io/workshopAWS1/2-prerequiste/2.1-createec2/",
	"title": "Setting Up Development Environment",
	"tags": [],
	"description": "",
	"content": "In this step, you will prepare the necessary tools and software to develop and test the web application.\nRequirements: Install Visual Studio 2022\nDuring installation, make sure to select the ASP.NET and web development workload to have all necessary tools for web development.\nInstall AWS CLI\nAfter installation, run the following command to verify:\naws --version "
},
{
	"uri": "https://tranthebao12.github.io/workshopAWS1/2-prerequiste/2.2-createiamrole/",
	"title": "Configure AWS CLI",
	"tags": [],
	"description": "",
	"content": "Configure AWS CLI In this step, we will configure the AWS Command Line Interface (CLI) to allow interaction with AWS services from your terminal.\n1. Open Terminal or Command Prompt Depending on your OS:\nWindows: Use Command Prompt or PowerShell. Linux/macOS: Use the terminal. 2. Run the aws configure Command Enter Access Key, Secret Key, region (us-east-1), output (json) then check with command aws sts get-caller-identity aws configure "
},
{
	"uri": "https://tranthebao12.github.io/workshopAWS1/3-accessibilitytoinstances/3.2-private-instance/",
	"title": "Create a folder in S3 Bucket",
	"tags": [],
	"description": "",
	"content": "Step 2: Create a folder in the bucket After creating the bucket, you need to create subfolders to store files in an organized way.\nImplementation: Step 1:\nAccess the bucket you just created. Click the Create folder button. Step 2:\nEnter the folder name, for example: uploads/ (used to save input images) temp/ (used to save temporary text and audio files) outputs/ (used to save output videos) Click Create folder to create each folder. After creating, the folder tree interface in the bucket will look like this: These folders are not actually physical folders but just key prefixes in S3, but are still very useful for organizing content for easy management.\n"
},
{
	"uri": "https://tranthebao12.github.io/workshopAWS1/5-deloy/5.1-updateiamrole/5.1.2-createvpc-copy/",
	"title": "Create an IAM Role for Elastic Beanstalk Service",
	"tags": [],
	"description": "",
	"content": "5.1.1. Create an IAM Role for Elastic Beanstalk Service (The role that EC2 servers will use) This is the role that the EC2 instances in your Elastic Beanstalk environment will assume. It needs minimal permissions to operate in the Elastic Beanstalk environment, including communicating with other AWS services like S3, CloudWatch, etc.\nSteps: Log in to the AWS Management Console and navigate to the IAM (Identity and Access Management) service.\nIn the left navigation bar, select Roles.\nClick the Create Role button. In the Select Trusted Entity Type section, select AWS Service.\nIn the Select Use Case section, select EC2, and then click Next. Add Permissions:\nSearch for and select the AWSElasticBeanstalkWebTier policy. Search for and select the AmazonS3FullAccess policy (or a custom S3 policy with more specific permissions if you want to restrict S3 access). Click Next.\nTags (Optional): Add key-value tag pairs as needed to organize your resources, then click Next.\nReview and Create:\nSet a Role Name (e.g., ImageToVideoWeb-EC2-AWSElasticBeanstalkWebTier-InstanceRole). Review the attached policies. Click Create Role. "
},
{
	"uri": "https://tranthebao12.github.io/workshopAWS1/5-deloy/5.2-creates3bucket/",
	"title": "Deploy to Elastic Beanstalk from Visual Studio 2022",
	"tags": [],
	"description": "",
	"content": "Deploy to Elastic Beanstalk from Visual Studio 2022 Prerequisites: Make sure you have installed AWS Toolkit for Visual Studio and connected to your AWS account in Visual Studio.\nSteps: In Visual Studio, right-click on your ASP.NET Core project in Solution Explorer. Select Publish to AWS \u0026hellip;. (Make sure you are logged in and connected to the correct AWS account in Visual Studio\u0026rsquo;s AWS Explorer before doing this step.) The Publish to Elastic Beanstalk dialog box will appear. Configure the following items: Deployment Target: Select Elastic Beanstalk ON WINDOW. APPLICATION NAME: Enter a name (e.g. ImageToVideoWeb). Click EDIT. Application Environment: Application Name: Enter ImageToVideoWeb.\nEnvironment Name: Enter ImageToVideoWeb-env.\nPlatform:\nPlatform: Select .NET on Windows Server.\nPlatform Branch: Select the appropriate Windows Server version (e.g. Windows Server Core or Windows Server full). AWS Options: Instance type: Select t3.micro (eligible for Free Tier for testing purposes).\nEC2 Key pair: Select ImageToVideoWeb-KeyPair created in step 4.1.3.\nService role: Select the role created in step 4.1.2 (e.g. ImageToVideoWeb-ServiceRole).\nInstance profile: Select the role created in step 4.1.1 (e.g. ImageToVideoWeb-EC2-InstanceRole).\nClick public. "
},
{
	"uri": "https://tranthebao12.github.io/workshopAWS1/2-prerequiste/2.1-createec2/2.1.2-createpublicsubnet/",
	"title": "Install AWS Toolkit for Visual Studio",
	"tags": [],
	"description": "",
	"content": "Install and set up AWS Toolkit for Visual Studio Open Visual Studio 2022.\nOn the top menu bar, select:\nExtensions → Manage Extensions. 3. In the Browse tab, enter the keyword AWS Toolkit for Visual Studio to search. 4. Click Download, then restart Visual Studio to complete the installation.\nInitial Setup After restarting Visual Studio, go to: Extentions → AWS Toolkit for .NET Refactoringr.\nIn the AWS Toolkit for .NET Refactoringr frame, click GET START to enter user information. You can sign in using one of the following two ways:\nIAM credentials (Access Key ID and Secret Access Key) or\nSSO (Single Sign-On) if your organization uses AWS SSO.\nAfter successfully signing in, you will see a list of AWS services and resources in your account. Note Make sure your IAM account has full permissions to work with EC2, Lambda, S3 and the AWS services you will use in the project.\nAWS Toolkit lets you deploy ASP.NET Core applications to services like Elastic Beanstalk or Lambda directly from Visual Studio.\n"
},
{
	"uri": "https://tranthebao12.github.io/workshopAWS1/2-prerequiste/",
	"title": "Preparation",
	"tags": [],
	"description": "",
	"content": "\rBefore starting the exercise, you need to complete the necessary environment and tool preparation steps below.\nPreparation content: Install tools: Install .NET SDK (ASP.NET Core). Configure AWS CLI: Install AWS CLI suitable for the operating system.\nConfigure AWS CLI with the command:\naws configure Enter Access Key, Secret Key, region and output format.\nPrepare source code: Clone or download ImageToVideoWeb project. Configure S3 bucket information and API keys (Google API Key, AWS S3 config, etc.) in appsettings.json. Test locally: Run the application in local environment: Reference links: .NET documentation AWS CLI documentation Google Cloud SDK documentation "
},
{
	"uri": "https://tranthebao12.github.io/workshopAWS1/4-s3log/4.2-creates3bucket/",
	"title": "Process and View Result",
	"tags": [],
	"description": "",
	"content": "Step 2: Process and View Result After successfully uploading an image, proceed to process the image and verify the generated video output.\nInstructions: Check the \u0026ldquo;EditTextList\u0026rdquo; Interface:\nThis screen shows the OCR (text extracted from the uploaded image). It also displays the translated text, typically into Vietnamese or another selected language. Create Video from Text:\nClick the \u0026ldquo;Create Video\u0026rdquo; button. The system will process the text and generate a video. The output video is saved in the outputs/ folder inside your S3 bucket. View the Video:\nOpen the \u0026ldquo;Result\u0026rdquo; interface to watch the video generated from the original image. If the video does not appear in the \u0026ldquo;Result\u0026rdquo; screen, check system logs or the processing status. Videos are saved under S3 \u0026gt; outputs/ when successfully created.\n"
},
{
	"uri": "https://tranthebao12.github.io/workshopAWS1/3-accessibilitytoinstances/3.3-private-instance/",
	"title": "Access Permissions Configuration",
	"tags": [],
	"description": "",
	"content": "Step 3: Configure Access Permissions To allow read/write permissions for demo purposes, we will add a bucket policy that grants permissions to a specific IAM user.\nNote: This policy grants relatively open access for demo purposes. In a production environment, you should use an IAM role with limited permissions and only allow private access.\nInstructions: Step 1:\nAccess your bucket in S3 Console.\nGo to the Permissions tab.\nStep 2:\nIn the Bucket policy section, click Edit. Step 3: Paste the following JSON into the editor: Remember to replace it with the user information you created earlier { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;AWS\u0026#34;: \u0026#34;arn:aws:iam::612674025610:user/laptrinh\u0026#34; }, \u0026#34;Action\u0026#34;: [ \u0026#34;s3:PutObject\u0026#34;, \u0026#34;s3:GetObject\u0026#34;, \u0026#34;s3:DeleteObject\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::imagetovideoweb-demo-20250608/*\u0026#34; }, { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;AWS\u0026#34;: \u0026#34;arn:aws:iam::612674025610:user/laptrinh\u0026#34; }, \u0026#34;Action\u0026#34;: \u0026#34;s3:ListBucket\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::imagetovideoweb-demo-20250608\u0026#34; }, { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::imagetovideoweb-demo-20250608/*\u0026#34; } ] } "
},
{
	"uri": "https://tranthebao12.github.io/workshopAWS1/5-deloy/5.1-updateiamrole/5.1.3-createvpc-copy-2/",
	"title": "Create Key Pair",
	"tags": [],
	"description": "",
	"content": "5.1.3. Create Key Pair Key pairs are required to enable SSH (or RDP for Windows) connections to EC2 instances in your Elastic Beanstalk environment for testing or debugging purposes.\nSteps: Log in to the AWS Management Console and navigate to the EC2 (Elastic Compute Cloud) service. In the left navigation bar, under Network \u0026amp; Security, select Key Pairs. 3. Click the Create key pair button. 4. Name the Key pair (e.g. ImageToVideoWeb-KeyPair). 5. Select Key pair type as RSA and Private key format as .pem (for Linux SSH client) or .ppk (if you use PuTTY on Windows). For Windows environment, .pem also works with built-in SSH tools or you can convert to .ppk later. Choose .pem for dissemination. 6. Click Create key pair. The private key file (.pem or .ppk) will be automatically downloaded to your browser. Store this file in a safe place and do not share it. "
},
{
	"uri": "https://tranthebao12.github.io/workshopAWS1/3-accessibilitytoinstances/",
	"title": "Deploy Amazon S3",
	"tags": [],
	"description": "",
	"content": "In this section, we will deploy Amazon S3 to store input files, temporary processing files, and output video files for the image-to-video workflow.\nContent 3.1. Create and configure an S3 Bucket 3.2. Set permissions and access policies\n"
},
{
	"uri": "https://tranthebao12.github.io/workshopAWS1/5-deloy/5.3-creates3bucket-copy/",
	"title": "Deploy Application",
	"tags": [],
	"description": "",
	"content": "5.3 Deploy Application: Wait 5-10 minutes (or longer depending on the complexity of your environment and AWS traffic) for Elastic Beanstalk to create the environment, including EC2 instances, load balancer (if applicable), auto scaling group, etc., and deploy your application.\nMonitor the deployment progress:\nYou can monitor the progress in the Output window of Visual Studio (select \u0026ldquo;AWS Deployment\u0026rdquo; or \u0026ldquo;AWS Toolkit\u0026rdquo;).\nOr monitor it directly on the AWS Elastic Beanstalk Console in your browser.\nGet the Environment URL: Once the environment is in the \u0026ldquo;Health: Ok\u0026rdquo; or \u0026ldquo;Ready state, you should see the environment URL (e.g. http://imagetovideoweb-env.eba-xxxx.us-east-1.elasticbeanstalk.com) displayed in the AWS Toolkit or on the Elastic Beanstalk console. Take a screenshot: AWS Toolkit with a successful publish status (e.g. \u0026ldquo;Deployment successful\u0026rdquo;).\nThe Elastic Beanstalk Console interface displays your environment with a \u0026ldquo;Health: Ok\u0026rdquo; status and the environment URL.\nTest the Application: Visit the Environment URL obtained in the previous step in your web browser.\nTest the web interface to ensure your ASP.NET Core application is running properly and displaying the desired interface.\nPerform the main functions of the app (including the \u0026ldquo;Image to Video\u0026rdquo; function if that is a main feature) to confirm everything works as expected. "
},
{
	"uri": "https://tranthebao12.github.io/workshopAWS1/2-prerequiste/2.3-createiamrole/",
	"title": "Preparation",
	"tags": [],
	"description": "",
	"content": "\rBefore starting the lab, make sure to complete the following environment and tool setup steps.\nPreparation Steps: Clone or download the source code:\nClone the ImageToVideoWeb project from GitHub or download the ZIP file. Extract the files and open the project in your preferred IDE (Visual Studio, VS Code, etc.). Update the appsettings.json file:\n{ \u0026#34;Gemini\u0026#34;: { \u0026#34;ApiKey\u0026#34;: \u0026#34;AIzaSyDJfsJxA67gB7IHc-lCedeX26I6YXcuJkA\u0026#34; }, \u0026#34;Logging\u0026#34;: { \u0026#34;LogLevel\u0026#34;: { \u0026#34;Default\u0026#34;: \u0026#34;Information\u0026#34;, \u0026#34;Microsoft.AspNetCore\u0026#34;: \u0026#34;Warning\u0026#34; } }, \u0026#34;AllowedHosts\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;GeminiApiKey\u0026#34;: \u0026#34;xxxxxxxxxxxxxxxxxxxxx\u0026#34;, \u0026#34;AWS\u0026#34;: { \u0026#34;Region\u0026#34;: \u0026#34;us-east-1\u0026#34;, \u0026#34;S3_BUCKET_NAME\u0026#34;: \u0026#34;imagetovideoweb-demo-20250608\u0026#34;, \u0026#34;AccessKeyId\u0026#34;: \u0026#34;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\u0026#34;, \u0026#34;SecretAccessKey\u0026#34;: \u0026#34;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\u0026#34; } } Please enter your AccessKeyId and SecretAccessKey "
},
{
	"uri": "https://tranthebao12.github.io/workshopAWS1/3-accessibilitytoinstances/3.4-private-instance/",
	"title": "Check S3 Upload",
	"tags": [],
	"description": "",
	"content": "Step 4: Check S3 Upload Now that you\u0026rsquo;ve created the folders and configured access, it\u0026rsquo;s time to verify that you can upload files to your bucket using the AWS CLI.\nInstructions: Step 1:\nUse the following AWS CLI command to upload a file (replace test.jpg with your actual file): aws s3 cp test.jpg s3://imagetovideoweb-demo-20250608/uploads/ "
},
{
	"uri": "https://tranthebao12.github.io/workshopAWS1/2-prerequiste/2.4-createiamrole/",
	"title": "Local Test",
	"tags": [],
	"description": "",
	"content": "\rBefore starting the lab, make sure you have completed the following environment and tool setup steps.\nPreparation steps: Clone or download the source code: Clone the ImageToVideoWeb project from GitHub or download the ZIP file.\nUnzip and open the project with Visual studio .\nLocal Test: Run the project in Visual Studio by pressing F5. "
},
{
	"uri": "https://tranthebao12.github.io/workshopAWS1/4-s3log/",
	"title": "Test the entire system",
	"tags": [],
	"description": "",
	"content": "Test the entire system (30 minutes) Objective: Ensure the application works seamlessly — from uploading photos to viewing the output video.\n1: Upload photos 2: Process and view results 4.1. Create and configure an S3 Bucket 4.2. Set permissions and access policies\n"
},
{
	"uri": "https://tranthebao12.github.io/workshopAWS1/5-deloy/",
	"title": "Deploy AWS Elastic Beanstalk",
	"tags": [],
	"description": "",
	"content": "Deploy AWS Elastic Beanstalk Objective: Ensure the application works seamlessly — from uploading photos to viewing the output video.\n1: Prepare AWS Elastic Beanstalk Configuration 2: Deploy to Elastic Beanstalk from Visual Studio 2022 3: Application Deployment 5.1. Prepare AWS Elastic Beanstalk Configuration 5.2. Deploy to Elastic Beanstalk from Visual Studio 2022 5.3 Application Deployment\n"
},
{
	"uri": "https://tranthebao12.github.io/workshopAWS1/6-portfwd/",
	"title": "Resource Cleanup",
	"tags": [],
	"description": "",
	"content": "6. Resource Cleanup (15 minutes) Objective: Delete all AWS resources created during the workshop to avoid incurring unexpected costs.\nSteps: Delete Elastic Beanstalk Environment: Log in to the AWS Management Console and navigate to the Elastic Beanstalk service.\nFrom the list of applications, select your ImageToVideoWeb application.\nClick on the Environment name (e.g., ImageToVideoWeb-env).\nOn the environment details page, choose Actions and then select Terminate Environment.\nConfirm the environment termination when prompted. This process may take several minutes.\nDelete S3 Bucket:\nOnce the Elastic Beanstalk environment has been fully terminated (ensure no instances are still using the bucket), navigate to the Amazon S3 service. Find and select your bucket named imagetovideoweb-demo-\u0026lt;UNIQUE-ID\u0026gt;. To delete a bucket, you first need to delete all objects (files/folders) within it. Click into the bucket, select all objects, then choose Delete and follow the confirmation prompts. After the bucket is empty, return to the list of buckets, select your bucket, and click Delete bucket. Enter the bucket name to confirm deletion. Delete IAM Roles and Key Pair: Log in to the AWS Management Console and navigate to the IAM (Identity and Access Management) service.\nIn the left navigation pane, select Roles.\nFind and select the roles you created: ImageToVideoWeb-EC2-InstanceRole and ImageToVideoWeb-ServiceRole.\nFor each role, click Delete role and confirm the deletion.\nNavigate to the EC2 service.\nIn the left navigation pane, under Network \u0026amp; Security, select Key Pairs.\nFind and select the Key pair you created: ImageToVideoWeb-KeyPair.\nClick Actions and select Delete. Confirm the deletion.\nCheck Resources and Costs:\nAccess the AWS Billing Dashboard (https://console.aws.amazon.com/billing/). Check the Bills or Cost Explorer sections to ensure no resources are still running and no unusual charges are incurring after the workshop. Screenshot Requirement:\nScreenshot of the Billing Dashboard showing that resources have been cleaned up or estimated costs are low/zero. It\u0026rsquo;s a good habit to clean up resources after every practice session or lab, especially when using a Free Tier account or for learning purposes.\n"
},
{
	"uri": "https://tranthebao12.github.io/workshopAWS1/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://tranthebao12.github.io/workshopAWS1/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]